/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.odb.svgtriangulate;

import br.odb.gamelib.swing.SwingCanvasRenderingContext;
import br.odb.gamelib.swing.TextureBaker;
import br.odb.gamerendering.rendering.DisplayList;
import br.odb.gamerendering.rendering.RenderingNode;
import br.odb.gamerendering.rendering.SVGRenderingNode;
import br.odb.libsvg.ColoredPolygon;
import br.odb.libsvg.SVGGraphic;
import br.odb.libsvg.SVGParsingUtils;
import br.odb.gameutils.math.Vec2;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

/**
 *
 * @author monty
 */
public class SVGTriangulateWindow extends javax.swing.JFrame {

    SVGGraphic graphic;

    private void onGraphicLoaded() {
        ArrayList<String> ids = new ArrayList<String>();

        for (ColoredPolygon cp : graphic.shapes) {
            ids.add(cp.id);
        }

        String[] asArray = new String[ids.size()];
        asArray = ids.toArray(asArray); //this is plain ugly.
        ComboBoxModel model;
        model = new DefaultComboBoxModel(asArray);
        cmbShapes.setModel(model);
    }

    /**
     * Creates new form SVGTriangulateWindow
     */
    public SVGTriangulateWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbShapes = new javax.swing.JComboBox();
        sldExtrusion = new javax.swing.JSlider();
        btnOpenSVG = new javax.swing.JButton();
        btnSaveAsSVG = new javax.swing.JButton();
        btnSaveAsBinary = new javax.swing.JButton();
        pnlSVGView = new br.odb.svgtriangulate.SVGViewJPanel();
        btnQuit = new javax.swing.JButton();
        btnSaveAsRegularSVG = new javax.swing.JButton();
        chkDrawIn3D = new javax.swing.JCheckBox();
        btnOpenAsBinary = new javax.swing.JButton();
        btnSaveAsTextureAndNormals = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbShapes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbShapes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbShapesItemStateChanged(evt);
            }
        });
        cmbShapes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShapesActionPerformed(evt);
            }
        });

        sldExtrusion.setMaximum(255);
        sldExtrusion.setValue(0);
        sldExtrusion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldExtrusionStateChanged(evt);
            }
        });

        btnOpenSVG.setText("Open");
        btnOpenSVG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenSVGActionPerformed(evt);
            }
        });

        btnSaveAsSVG.setText("Save triangulated as SVG");
        btnSaveAsSVG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsSVGActionPerformed(evt);
            }
        });

        btnSaveAsBinary.setText("Save triangulated as binary");
        btnSaveAsBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsBinaryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSVGViewLayout = new javax.swing.GroupLayout(pnlSVGView);
        pnlSVGView.setLayout(pnlSVGViewLayout);
        pnlSVGViewLayout.setHorizontalGroup(
            pnlSVGViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 957, Short.MAX_VALUE)
        );
        pnlSVGViewLayout.setVerticalGroup(
            pnlSVGViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 786, Short.MAX_VALUE)
        );

        btnQuit.setText("Quit");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        btnSaveAsRegularSVG.setText("Save as regular SVG");
        btnSaveAsRegularSVG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsRegularSVGActionPerformed(evt);
            }
        });

        chkDrawIn3D.setText("draw in 3D");
        chkDrawIn3D.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkDrawIn3DStateChanged(evt);
            }
        });

        btnOpenAsBinary.setText("Open as binary");
        btnOpenAsBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenAsBinaryActionPerformed(evt);
            }
        });

        btnSaveAsTextureAndNormals.setText("Save as texture + Normals");
        btnSaveAsTextureAndNormals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsTextureAndNormalsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSVGView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(sldExtrusion, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                        .addComponent(cmbShapes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnQuit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSaveAsSVG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveAsBinary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveAsRegularSVG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(btnSaveAsTextureAndNormals, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnOpenAsBinary, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOpenSVG, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(chkDrawIn3D, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbShapes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sldExtrusion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDrawIn3D)
                        .addGap(45, 45, 45)
                        .addComponent(btnOpenSVG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpenAsBinary)
                        .addGap(18, 18, 18)
                        .addComponent(btnSaveAsRegularSVG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveAsSVG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveAsBinary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaveAsTextureAndNormals)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnQuit))
                    .addComponent(pnlSVGView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenSVGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenSVGActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.showDialog(this, "Open");
        File file = fileChooser.getSelectedFile();

        if (file != null) {

            String filePath = file.getAbsolutePath();
            try {
                graphic = new SVGGraphic(SVGParsingUtils.readSVG(new FileInputStream(filePath))).scale(0.5f, 0.5f);
                onGraphicLoaded();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SVGTriangulateWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        updateWidgets();
    }//GEN-LAST:event_btnOpenSVGActionPerformed

    private void btnSaveAsSVGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsSVGActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.showDialog(this, "Save");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            String filePath = file.getAbsolutePath();
            SVGGraphic processed = SVGParsingUtils.splitIntoMonotones(graphic);
            SVGParsingUtils.writeSVG(processed, filePath);
        }
    }//GEN-LAST:event_btnSaveAsSVGActionPerformed

    private void btnSaveAsBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsBinaryActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.showDialog(this, "Save");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            String filePath = file.getAbsolutePath();
            SVGGraphic processed = SVGParsingUtils.splitIntoMonotones(graphic);
            SVGParsingUtils.writeBinary(processed, graphic, filePath);
        }
    }//GEN-LAST:event_btnSaveAsBinaryActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed

    private void chkDrawIn3DStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkDrawIn3DStateChanged
        updateWidgets();
    }//GEN-LAST:event_chkDrawIn3DStateChanged

    private void cmbShapesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbShapesItemStateChanged

    }//GEN-LAST:event_cmbShapesItemStateChanged

    private void sldExtrusionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldExtrusionStateChanged
        ColoredPolygon cp = graphic.getShapeById( (String) cmbShapes.getSelectedItem() );
        cp.z = sldExtrusion.getValue();
        updateWidgets();
    }//GEN-LAST:event_sldExtrusionStateChanged

    private void btnSaveAsRegularSVGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsRegularSVGActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.showDialog(this, "Save");
        File file = fileChooser.getSelectedFile();

        if (file != null) {
            String filePath = file.getAbsolutePath();
            SVGParsingUtils.writeSVG(graphic, filePath);
        }
    }//GEN-LAST:event_btnSaveAsRegularSVGActionPerformed

    private void cmbShapesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShapesActionPerformed
        updateWidgets();
    }//GEN-LAST:event_cmbShapesActionPerformed

    private void btnOpenAsBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenAsBinaryActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.showDialog(this, "Open");
        File file = fileChooser.getSelectedFile();

        if (file != null) {

            String filePath = file.getAbsolutePath();
            
            graphic = SVGGraphic.fromBinary( filePath ).scale(0.5f, 0.5f);
            onGraphicLoaded();
            
        }

        updateWidgets();        
    }//GEN-LAST:event_btnOpenAsBinaryActionPerformed

    
    private void btnSaveAsTextureAndNormalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsTextureAndNormalsActionPerformed
        BufferedImage off_Image = new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graphics = off_Image.createGraphics();
        SwingCanvasRenderingContext rc = new SwingCanvasRenderingContext();
        rc.prepareWithCanvas( graphics );
        TextureBaker.render(rc, graphic);

        File outputfile = new File("/Users/monty/saved.png");
        try {
            ImageIO.write(off_Image, "png", outputfile);
        } catch (IOException ex) {
            Logger.getLogger(SVGTriangulateWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveAsTextureAndNormalsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SVGTriangulateWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SVGTriangulateWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SVGTriangulateWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SVGTriangulateWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SVGTriangulateWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpenAsBinary;
    private javax.swing.JButton btnOpenSVG;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnSaveAsBinary;
    private javax.swing.JButton btnSaveAsRegularSVG;
    private javax.swing.JButton btnSaveAsSVG;
    private javax.swing.JButton btnSaveAsTextureAndNormals;
    private javax.swing.JCheckBox chkDrawIn3D;
    private javax.swing.JComboBox cmbShapes;
    private br.odb.svgtriangulate.SVGViewJPanel pnlSVGView;
    private javax.swing.JSlider sldExtrusion;
    // End of variables declaration//GEN-END:variables

    private void updateWidgets() {

        if (graphic != null) {
            DisplayList displayList = new DisplayList("id");
            
            SVGRenderingNode node2D;
            
            if ( chkDrawIn3D.isSelected() ) {
                Iso3DSVGRenderingNode node = new Iso3DSVGRenderingNode(graphic, "logo");
                node.selected = (String) cmbShapes.getSelectedItem();
                node2D = node;                
            } else {            
                node2D = new SVGRenderingNode(graphic, "logo");
            }
            displayList.setItems(new RenderingNode[]{node2D});
            
            this.pnlSVGView.setRenderingContent(displayList);
            this.pnlSVGView.repaint();
            String selectedId = (String) cmbShapes.getSelectedItem();
            ColoredPolygon cp = graphic.getShapeById( selectedId );
            sldExtrusion.setValue( cp.z );
            
        }
        System.out.println("updating " + System.currentTimeMillis());
    }
}
